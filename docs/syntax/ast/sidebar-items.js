window.SIDEBAR_ITEMS = {"enum":[["Decl",""],["Exp",""],["Item",""],["LookupError",""],["Type",""]],"fn":[["id",""],["occurs_in",""]],"mod":[["forget",""],["fv",""],["generic",""],["lookup_table",""],["subst",""],["typed",""],["untyped",""],["working",""]],"struct":[["AnyOf",""],["Args","A list of arguments In dependent type theory, this concept is usually called a “substitution” but that name would be confusing in this implementation because it conflicts with the operation of substitution (i.e. substituting a terms for a variable in another term). In particular, while we often substitute argument lists for telescopes, this is not always the case. Substitutions in the sense of argument lists are a special case of a more general concept of context morphisms. Unifiers are another example of context morphisms and applying a unifier to an expression mean substituting various terms, which are not necessarily part of a single argument list."],["Case",""],["Cocase",""],["Codata",""],["Codef",""],["Comatch",""],["Const",""],["Ctor",""],["Data",""],["Decls",""],["Def",""],["Dtor",""],["Id",""],["Match",""],["Motive",""],["Param",""],["ParamInst","Instantiation of a previously declared parameter"],["Prg",""],["SelfParam",""],["Telescope","Wrapper type signifying the wrapped parameters have telescope semantics. I.e. each parameter binding in the parameter list is in scope for the following parameters."],["TelescopeInst","Instantiation of a previously declared telescope"],["TypAbs",""],["TypApp",""]],"trait":[["Fold",""],["Folder",""],["HasPhase",""],["Map",""],["Mapper",""],["Occurs",""],["Out",""],["Phase",""],["Visit",""],["Visitor",""]]};