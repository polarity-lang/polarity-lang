data Nat : Type :=
    Z : Nat,
    S(n: Nat) : Nat;

def Nat.add(y: Nat) : Nat := match
    Z => y,
    S(x' : Nat) => S(x'.add(y));

data Vec(n: Nat) : Type :=
    Nil : Vec(Z),
    Cons(n: Nat, x: Nat, xs: Vec(n)) : Vec(S(n));

codata Stream : Type :=
    Stream.head : Nat,
    Stream.tail : Stream;

codata NatToNat : Type :=
    NatToNat.apply(x: Nat) : Nat;
