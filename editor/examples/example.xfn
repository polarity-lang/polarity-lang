data Nat {
    Z,
    S(n: Nat),
}

impl Nat {
    def Nat.add(y: Nat) : Nat {
        Z => y,
        S(x') => S(x'.add(y)),
    }
}

data Vec(n: Nat) {
    Nil : Vec(Z),
    Cons(n: Nat, x: Nat, xs: Vec(n)) : Vec(S(n)),
}

codata Stream {
    head : Nat,
    tail : Stream
}

codata NatToNat {
    apply(x: Nat) : Nat
}

S(S(Z)).add(S(S(Z)))
