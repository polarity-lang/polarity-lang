data Nat : Type {
    Z : Nat,
    S(n: Nat) : Nat
}

data NotZero(n: Nat) : Type {
    SNotZero(n: Nat) : NotZero(S(n))
}

impl NotZero {
    def NotZero(Z).elim_zero(a: Type) : a {
        SNotZero(n: Nat) absurd
    }
}

data Bot : Type { }

data Foo(a: Type) : Type {
    Ok(a: Type, x: a) : Foo(a),
    Absurd(x: NotZero(Z)) : Foo(Bot)
}

impl Foo {
    def Foo(a).elim(a: Type) : a {
        Ok(a: Type, x: a) => x,
        Absurd(x: NotZero(Z)) => x.elim_zero(Bot)
    }
}
