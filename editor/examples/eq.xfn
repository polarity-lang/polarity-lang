codata Prop(a: Type, x: a) : Type :=
    Prop(a, x).apply(a: Type, x: a) : Type;

data Eq (a: Type, x: a, y: a) : Type :=
    Refl(a: Type, x: a) : Eq(a, x, x);

def Eq(a, x, y).sym(a: Type, x: a, y: a) : Eq(a, y, x) := match
    Refl(a: Type, x: a) => Refl(a, x);

def Eq(a, x, y).subst(a: Type, x: a, y: a, p: Prop(a, x)) : Prop(a, y) := match
    Refl(a: Type, x: a) => p;

def Eq(a, x, y).trans(a: Type, x: a, y: a, z: a, h: Eq(a, y, z)) : Eq(a, x, z) := match
    Refl(a: Type, x: a) => h;
