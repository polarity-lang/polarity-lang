data Nat {
    Z,
    S(n: Nat),
}

impl Nat {
    def Nat.add(y: Nat) : Nat {
        Z => y,
        S(x') => S(x'.add(y)),
    }
}

data Vec(n: Nat) {
    Nil : Vec(Z),
    Cons(n: Nat, x: Nat, xs: Vec(n)) : Vec(S(n)),
}

impl Vec {
    def Vec(S(n)).tail(n: Nat) : Vec(n) {
        Cons(n', x, xs) => xs,
        Nil absurd,
    }

   def Vec(n).append(n: Nat, m: Nat, ys: Vec(m)) : Vec(n.add(m)) {
       Nil => ys,
       Cons(n', x, xs) => Cons(n'.add(m), x, xs.append(n', m, ys))
   }
}

data Top { Unit }

impl Top {
    def Top.example1: Vec(S(S(Z))) {
        Unit => Cons(S(Z), Z, Cons(Z, Z, Nil))
    }

    def Top.example2: Vec(S(S(S(S(Z))))) {
        Unit => Unit.example1.append(S(S(Z)), S(S(Z)), Unit.example1)
    }
}

Unit.example2
