data Nat {
    Z,
    S(n: Nat),
}

codata Vec(n: Nat) {
    Vec(S(n)).tail(n: Nat) : Vec(n)
--    Vec(n).append(n: Nat, m: Nat, ys: Vec(m)) : Vec(n.add(m))
}

impl Vec {
    codef Nil() : Vec(Z) {
--        append(n, m, ys) => ys
        tail(n) absurd
    }
    codef Cons(n: Nat, xs: Vec(n)): Vec(S(n)) {
        tail(n) => xs
--        append(n', m, xs) => Cons(S(n'.add(m)), x, xs.append(n', m, ys))
    }
}
